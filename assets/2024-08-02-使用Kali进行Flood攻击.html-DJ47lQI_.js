import{w as i,z as s,C as a,K as t}from"./app-BEiq8e5_.js";const e={},h=t(`<div class="hint-container caution"><p class="hint-container-title">警告</p><p>本文内容还需要进一步确认和修正。</p></div><div class="hint-container important"><p class="hint-container-title">转载说明</p><p>原文链接：<a href="https://blog.csdn.net/Refrain_mh/article/details/121161824" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/Refrain_mh/article/details/121161824</a></p><p>版权声明：本文为 CSDN 博主「重启艺术大师」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p></div><details class="hint-container details"><summary>TCP SYN Flood</summary><p>TCP-SYN Flood 攻击又称半开式连接攻击，每当我们进行一次标准的 TCP 连接，都会有一个三次握手的过程，而 TCP-SYN Flood 在它的实现过程中只有前两个步骤。这样，服务方会在一定时间处于等待接收请求方 ASK 消息的状态。由于一台终端可用的 TCP 连接是有限的，如果恶意攻击方快速连续地发送此类连接请求，则终端可用 TCP 连接队列很快将会阻塞，系统资源和可用带宽急剧下降，无法提供正常的网络服务，从而造成拒绝服务。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100.37.1.2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10.35.1.80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 发送的数据包的数量。 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 发送到目标机器的每个数据包的大小。单位是字节 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-S</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 只发送 SYN 数据包。 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # TCP 窗口大小。 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 目的地端口(80 是 WEB 端口)。你在这里可以使用任何端口。 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--flood</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 尽可能快地发送数据包，不需要考虑显示入站回复。洪水攻击模式。 </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--rand-source</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> # 使用随机性的源头 IP 地址。这里的伪造的 IP 地址，只是在局域中伪造。通过路由器后，还会还原成真实的 IP 地址。 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 如果攻击CentOS效果不明显可以先关闭CentOS中的TCP_SYNCookies </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/proc/sys/net/ipv4/tcp_syncookies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 该选项默认值是1，即启用syn cookies功能，此功能能够有效地防止syn flood攻击。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>TCP ACK Flood</summary><p>对于短时间内向目标发送大量的的 TCP 数据包，在处理每一个数据包的时候资源消耗殆尽导致拒绝服务。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -A</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>TCP Syn-Ack Flood</summary><p>SYN-ACK Flood 攻击正是利用了这一点，攻击者利用工具或者操纵僵尸主机，向目标终端发送大量的 SYN-ACK 报文，这些报文都属于凭空出现的第二次握手报文，终端忙于回复 RST 报文，导致资源耗尽，无法响应正常的请求。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -q</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">源i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-S</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1134</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --keep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 515</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --faster</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Data ack and push flood</summary><p>当与终端连接时，客户端可以通过设置 ACK 标志来请求确认已接收到信息，或者它可以通过设置 PUSH 标志强制终端处理数据包中的信息。这两个请求都要求终端执行比其他类型的请求更多的工作。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -PA</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PORT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>UDP Flood</summary><p>UDP 洪泛是一种拒绝服务攻击，其中大量的用户数据报协议（UDP）数据包被发送到目标终端，目的是压倒该设备的处理和响应能力。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 50000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --udp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>ICMP Flood</summary><p>ICMP（Internet Control Message Protocol–Internet 控制消息协议）是网络层的协议类似于 UDP。ICMP 递送状态消息，错误报告，回答某些请求，报告路由信息，并且常用于测试网络的连通性和排查问题。</p><p>ICMP Floods 类似于 UDP 不需要任何漏洞，只需要发送大量的 ICMP 数据包，在处理每一个数据包的时候资源消耗殆尽导致拒绝服务。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --icmp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-sourcet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>ICMP-Echo flood</summary><p>ICMP-Echo flooding 是指发送大量 ICMP Echo 数据包。这些数据包具有源 IP（通常被欺骗以减少 IP 信誉机制的影响）和受害者的目标 IP。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --icmp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -C</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-sourcet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>特殊标志位的 DoS 攻击</summary><p>FIN -F RST -F ACK -A SYN -S</p><p><strong>设置 FIN 和 RST 标志位的 dos 攻击</strong></p><p>正常情况下，FIN 标志和 RST 标志是不能同时出现在一个 TCP 报文中的。而且 RFC 也没有规定 IP 协议栈如何处理这样的畸形报文，因此，各个操作系统的协议栈在收到这样的报文后的处理方式也不同，攻击者就可以利用这个特征，通过发送 FIN 和 RST 同时设置的报文，来判断操作系统的类型，然后针对该操作系统，进行进一步的攻击。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>设置 ACK 和 RST 标志位的 dos 攻击。</strong></p><p>正常情况下，ACK 标志和 RST 标志是不能同时出现在一个 TCP 报文中的。而且 RFC 也没有规定 IP 协议栈如何处理这样的畸形报文，因此，各个操作系统的协议栈在收到这样的报文后的处理方式也不同，攻击者就可以利用这个特征，通过发送 ACK 和 RST 同时设置的报文，来判断操作系统的类型，然后针对该操作系统，进行进一步的攻击。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -A</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> —R</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>TCP 连接攻击</summary><p>Connection Flood 是典型的并且非常的有效的利用小流量冲击大带宽网络服务的攻击方式，这种攻击方式目前已经越来越猖獗。这种攻击的原理是利用真实的 IP 地址向终端发起大量的连接，并且建立连接之后很长时间不释放，占用终端的资源，造成终端终端上残余连接 (WAIT 状态) 过多，效率降低，甚至资源耗尽，无法响应其他客户所发起的连接。</p><p>其中一种攻击方法是每秒钟向终端发起大量的连接请求，这类似于固定源 IP 的 SYN Flood 攻击，不同的是采用了真实的源 IP 地址。通常这可以在防火墙上限制每个源 IP 地址每秒钟的连接数来达到防护目的。但现在已有工具采用慢速连接的方式，也即几秒钟才和终端建立一个连接，连接建立成功之后并不释放并定时发送垃圾数据包给终端使连接得以长时间保持。这样一个 IP 地址就可以和终端建立成百上千的连接，而终端可以承受的连接数是有限的，这就达到了拒绝服务的效果</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tcp-connect</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rate=90000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 900000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -q</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Large Ping</summary><p>ICMP（Internet Control Message Protocol–Internet 控制消息协议）和 IGMP（Internet Group Management Protocol–Internet 组管理协议）是网络层的协议类似于 UDP。ICMP 递送状态消息，错误报告，回答某些请求，报告路由信息，并且常用于测试网络的连通性和排查问题。IGMP 是 IP 网络上的系统和相邻路由用来建立和维护多播组成员关系的协议。</p><p>ICMP and IGMP Floods 类似于 UDP 不需要任何漏洞，只需要发送大量的 ICMP 或 IGMP 数据包，在处理每一个数据包的时候资源消耗殆尽导致拒绝服务。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 501</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-source</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PORT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>固定源 ICMP 攻击</summary><p>伪装 IP 攻击</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 伪装IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目标IP</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Ping of Death</summary><p>Ping of death 是一种拒绝服务攻击，方法是由攻击者故意发送大于 65536 比特的 ip 数据包给对方。Ping of death 攻击利用了 Internet 控制消息协议 (ICMP) 和最大传输单元 (MTU) 的特点，Ping 命令发送 ICMP 回应请求 (ICMP Echo-Request) 并记录收到 ICMP 回应回复 (ICMP Echo-Reply)。MTU 定义了具有不同媒体类型的网络架构的单元最大传输量。</p><p>如果数据包大小大于MTU，数据包将被拆分，并在目的主机重新组合。当数据包被分解时，数据包会涵盖一个“偏移”值，这个偏移值用于在目的主机重组数据。攻击者可以将最后的数据片段替换为合理的偏移值和较大的数据包，这样将会超过ICMP回应请求数据部分的数量，如果进行重组，目的计算机将会重新启动或者崩溃。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 70000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>源端口为 0**</summary><p>访问 UDP/TCP 的 0 端口导致该事件的产生，这是一个不正常的访问，暗示着非授权的网络访问或探测活动。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tcp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --udp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --flood</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rand-source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>ICMP-Smurf attack</summary><p>ICMP/SMURF 攻击利用的是网络广播的原理来发送大量的连接, 而包的源地址就是要攻击的机器本身的地址; 因而所有接收到此包的主机都将给包的源地址发送一个 ICMP 回复包。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.168.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.168.0.255</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目标ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目标服务器广播地址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>TCP-Land Attack</summary><p>着陆攻击 LAND Attack 也是一种拒绝服务攻击 DOS。LAND 是 Local Area Network Denial 的缩写，意思是局域网拒绝服务攻击，翻译为着陆攻击只是一种错误的理解。攻击原理为，攻击机向目标机发送一个 SYN 的 TCP 包，包中的源地址被伪造为目标机的地址。当目标机收到包后，会向自己发送一个 SYN+ACK 的 TCP 包。然后，目标机向自己发送一个 ACK 包，这样就自己和自己建立一个空连接。这个空连接会一直持续，直到超时。当目标机被这样大量欺骗，建立大量空连接，消耗大量的系统资源，导致系统运行缓慢，甚至崩溃。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">源I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">目标I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">P&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Fraggle Attack</summary><p>Fraggle 攻击对 Smurf 攻击作了简单的修改，使用的是 UDP 应答消息而非 ICMP。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目标ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 目标服务器广播地址</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hping3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.168.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192.168.0.255</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>hping3 的其他参数用法</summary><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><p><code>-h</code> <code>--help</code> 显示帮助</p><p><code>-v</code> <code>--version</code> 显示版本</p><p><code>-c</code> <code>--count</code> 发送数据包的数目</p><p><code>-i</code> <code>--interval</code> 发送数据包间隔的时间 (uX即X微秒,例如：-i u1000)</p><p><code>--fast</code> 等同 <code>-i u10000</code>(每秒10个包)</p><p><code>--faster</code> 等同 <code>-i u1000</code>(每秒100个包)</p><p><code>--flood</code> 尽最快发送数据包，不显示回复。</p><p><code>1 2 3 -n --numeric</code> 数字化输出，象征性输出主机地址。</p><p><code>-q</code> <code>--quiet</code> 安静模式</p><p><code>-I</code> <code>--interface</code> 网卡接口 (默认路由接口)</p><p><code>-V</code> <code>--verbose</code> 详细模式</p><p><code>-D</code> <code>--debug</code> 调试信息</p><p><code>-z</code> <code>--bind</code> 绑定ctrl+z到ttl(默认为目的端口)</p><p><code>-Z</code> <code>--unbind</code> 取消绑定ctrl+z键</p><p><code>–beep</code> 对于接收到的每个匹配数据包蜂鸣声提示</p><h3 id="模式选择" tabindex="-1"><a class="header-anchor" href="#模式选择"><span>模式选择</span></a></h3><p>default mode TCP // 默认模式是 TCP</p><p>-0 --rawip RAWIP模式，原始IP模式。在此模式下HPING会发送带数据的IP头。即裸IP方式。使用RAWSOCKET方式。</p><p>-1 --icmp ICMP模式，此模式下HPING会发送IGMP应答报，你可以用–ICMPTYPE --ICMPCODE选项发送其他类型/模式的ICMP报文。</p><p>-2 --udp UDP 模式，缺省下，HPING会发送UDP报文到主机的0端口，你可以用–baseport --destport --keep选项指定其模式。</p><p>-8 --scan SCAN mode. //扫描模式 指定扫描对应的端口。</p><p>Example: hping --scan 1-30,70-90 -S <a href="http://www.target.host/" target="_blank" rel="noopener noreferrer">www.target.host</a> // 扫描</p><p>-9 --listen listen mode // 监听模式</p><ul><li><p><strong>IP 模式</strong></p><p>-a --spoof spoof source address //源地址欺骗。伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。</p><p>–rand-dest random destionation address mode. see the man. // 随机目的地址模式。详细使用 man 命令</p><p>–rand-source random source address mode. see the man. // 随机源地址模式。详细使用 man 命令</p><p>-t --ttl ttl (默认 64) //修改 ttl 值</p><p>-N --id id (默认 随机) // hping 中的 ID 值，缺省为随机值</p><p>-W --winid 使用win* id字节顺序 //使用winid模式，针对不同的操作系统。UNIX ,WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。</p><p>-r --rel 相对id字段(估计主机流量) //更改ID的，可以让ID曾递减输出，详见HPING-HOWTO。</p><p>-f --frag 拆分数据包更多的frag. (may pass weak acl) //分段，可以测试对方或者交换机碎片处理能力，缺省16字节。</p><p>-x --morefrag 设置更多的分段标志 // 大量碎片，泪滴攻击。</p><p>-y --dontfrag 设置不分段标志 // 发送不可恢复的IP碎片，这可以让你了解更多的MTU PATH DISCOVERY。</p><p>-g --fragoff set the fragment offset // 设置断偏移。</p><p>-m --mtu 设置虚拟最大传输单元, implies –frag if packet size &gt; mtu // 设置虚拟MTU值，当大于mtu的时候分段。</p><p>-o --tos type of service (default 0x00), try –tos help // tos字段，缺省0x00，尽力而为？</p><p>-G --rroute includes RECORD_ROUTE option and display the route buffer // 记录IP路由，并显示路由缓冲。</p><p>–lsrr 松散源路由并记录路由 // 松散源路由</p><p>–ssrr 严格源路由并记录路由 // 严格源路由</p><p>-H --ipproto 设置IP协议字段，仅在RAW IP模式下使用 //在RAW IP模式里选择IP协议。设置ip协议域，仅在RAW ip模式使用。</p></li><li><p><strong>ICMP 模式</strong></p><p>-C --icmptype icmp类型(默认echo请求) // ICMP类型，缺省回显请求。</p><p>-K --icmpcode icmp代号(默认0) // ICMP代码。</p><p>–force-icmp 发送所有icmp类型(默认仅发送支持的类型) // 强制ICMP类型。</p><p>–icmp-gw 设置ICMP重定向网关地址(默认0.0.0.0) // ICMP重定向</p><p>–icmp-ts 等同 –icmp --icmptype 13 (ICMP 时间戳) // icmp时间戳</p><p>–icmp-addr 等同 –icmp --icmptype 17 (ICMP 地址子网掩码) // icmp子网地址</p><p>–icmp-help 显示其他icmp选项帮助 // ICMP帮助</p></li><li><p><strong>UDP/TCP 模式</strong></p><p>-s --baseport base source port (default random) // 缺省随机源端口</p><p>-p --destport [+][+] destination port(default 0) ctrl+z inc/dec // 缺省随机源端口</p><p>-k --keep keep still source port // 保持源端口</p><p>-w --win winsize (default 64) // win的滑动窗口。windows发送字节(默认64)</p><p>-O --tcpoff set fake tcp data offset (instead of tcphdrlen / 4) // 设置伪造tcp数据偏移量(取代tcp地址长度除4)</p><p>-Q --seqnum shows only tcp sequence number // 仅显示tcp序列号</p><p>-b --badcksum (尝试)发送具有错误IP校验和数据包。许多系统将修复发送数据包的IP校验和。所以你会得到错误UDP/TCP校验和。</p><p>-M --setseq 设置TCP序列号</p><p>-L --setack 设置TCP的ack ------------------------------------- (不是 TCP 的 ACK 标志位)</p><p>-F --fin set FIN flag</p><p>-S --syn set SYN flag</p><p>-R --rst set RST flag</p><p>-P --push set PUSH flag</p><p>-A --ack set ACK flag ------------------------------------- （设置 TCP 的 ACK 标志 位）</p><p>-U --urg set URG flag // 一大堆IP抱头的设置。</p><p>-X --xmas set X unused flag (0x40)</p><p>-Y --ymas set Y unused flag (0x80)</p><p>–tcpexitcode 使用last tcp-&gt; th_flags作为退出码</p><p>–tcp-mss 启用具有给定值的TCP MSS选项</p><p>–tcp-timestamp 启用 TCP 时间戳选项来猜测 HZ/uptime</p></li></ul></details>`,19),l=[h];function n(p,k){return s(),a("div",null,l)}const r=i(e,[["render",n],["__file","2024-08-02-使用Kali进行Flood攻击.html.vue"]]),g=JSON.parse('{"path":"/posts/CyberSecurity/2024-08-02-%E4%BD%BF%E7%94%A8Kali%E8%BF%9B%E8%A1%8CFlood%E6%94%BB%E5%87%BB.html","title":"【转载】使用 Kali 进行 Flood 攻击","lang":"zh-CN","frontmatter":{"title":"【转载】使用 Kali 进行 Flood 攻击","shortTitle":"使用 Kali 进行 Flood 攻击","description":"使用 Kali 进行 Flood 攻击","icon":"Kali","author":"昌霖学长","isOriginal":false,"date":"2024-08-01T00:00:00.000Z","categories":["网络安全","Kali"],"tags":["Kali","Flood 攻击"],"license":"MIT","sticky":false,"star":false,"article":true,"timeline":true,"head":[["meta",{"property":"og:url","content":"https://shawnlyu1990.github.io/posts/CyberSecurity/2024-08-02-%E4%BD%BF%E7%94%A8Kali%E8%BF%9B%E8%A1%8CFlood%E6%94%BB%E5%87%BB.html"}],["meta",{"property":"og:site_name","content":"归墟之下"}],["meta",{"property":"og:title","content":"【转载】使用 Kali 进行 Flood 攻击"}],["meta",{"property":"og:description","content":"使用 Kali 进行 Flood 攻击"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T05:44:26.000Z"}],["meta",{"property":"article:author","content":"昌霖学长"}],["meta",{"property":"article:tag","content":"Kali"}],["meta",{"property":"article:tag","content":"Flood 攻击"}],["meta",{"property":"article:published_time","content":"2024-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-02T05:44:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【转载】使用 Kali 进行 Flood 攻击\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-02T05:44:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"昌霖学长\\"}]}"]]},"headers":[],"git":{"createdTime":1724050890000,"updatedTime":1725255866000,"contributors":[{"name":"Shawn Lyu","email":"shawnlyu1990@gmail.com","commits":3}]},"readingTime":{"minutes":13.62,"words":4086},"filePathRelative":"posts/CyberSecurity/2024-08-02-使用Kali进行Flood攻击.md","localizedDate":"2024年8月1日","excerpt":"","copyright":{"license":"MIT"}}');export{r as comp,g as data};
