import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,d as n,r as h,o as l}from"./app-BICfmULO.js";const d={};function r(k,i){const s=h("VPBanner");return l(),a("div",null,[t(s,{title:"Docker CLI 官方文档",content:"主要的 Docker 命令行接口（CLI），包含所有 docker 命令。",logo:"https://docs.docker.com/favicons/docs@2x.ico",actions:[{text:"访问",link:"https://docs.docker.com/reference/cli/docker/container/run/"}]}),i[0]||(i[0]=n(`<h2 id="命令示例" tabindex="-1"><a class="header-anchor" href="#命令示例"><span>命令示例</span></a></h2><p><code>docker run</code> 命令是在 Docker 中创建和运行容器的主要命令之一。它允许根据需要配置容器的各种属性。</p><p>示例：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my_nginx</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 80:80</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/nginx/conf:/etc/nginx/conf.d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/nginx/html:/usr/share/nginx/html</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  nginx:latest</span></span></code></pre></div><p>或者</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my_nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 80:80</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/nginx/conf:/etc/nginx/conf.d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/nginx/html:/usr/share/nginx/html</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx:latest</span></span></code></pre></div><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明"><span>参数说明</span></a></h2><h3 id="后台运行-d-detach" tabindex="-1"><a class="header-anchor" href="#后台运行-d-detach"><span><strong>后台运行（<code>-d</code>，<code>--detach</code>）</strong></span></a></h3><p>在后台以守护进程模式运行容器。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><h3 id="交互模式-it-interactive-tty" tabindex="-1"><a class="header-anchor" href="#交互模式-it-interactive-tty"><span><strong>交互模式（<code>-it</code>，<code>--interactive --tty</code>）</strong></span></a></h3><p><code>-it</code> 其实是两个参数，分别是 <code>-i</code>（<code>--interactive</code>） 和 <code>-t</code>（<code>--tty</code>）。</p><ul><li><p><code>-i</code>（<code>--interactive</code>）代表启用容器的 <code>STDIN</code> 标准输入，并将用户输入的内容通过标准输入重定向到容器内部。</p></li><li><p><code>-t</code>（<code>--tty</code>）代表分配一个伪 TTY 给容器，将终端的 I/O 连接到容器中。这样就可以在宿主机中使用命令操作容器了。</p></li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><h3 id="指定名称-name" tabindex="-1"><a class="header-anchor" href="#指定名称-name"><span><strong>指定名称（<code>--name</code>）</strong></span></a></h3><p>为容器指定一个名称。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定容器名称为 container_name</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> container_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><h3 id="端口映射-p-expose" tabindex="-1"><a class="header-anchor" href="#端口映射-p-expose"><span><strong>端口映射（<code>-p</code>，<code>--expose</code>）</strong></span></a></h3><p>将容器的端口映射到主机上的端口。可以逐个映射，也可以批量映射。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8080:80</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 17000-18000:7000-8000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将容器的 80 端口映射到主机的 8080 端口上，这样可以通过访问主机的 8080 端口访问到容器的 80 端口</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 也可以批量映射。将容器的 7000-8000 端口，依次映射到主机的 17000-18000 端口。</span></span></code></pre></div><h3 id="文件-目录映射-v" tabindex="-1"><a class="header-anchor" href="#文件-目录映射-v"><span><strong>文件/目录映射（<code>-v</code>）</strong></span></a></h3><p>挂载主机上的文件或目录到容器内部。如果宿主机上的目录不存在，Docker 会在宿主机上自动创建该目录并挂载到容器中。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /host_path/:/container_path/</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将宿主机的 /host_path/ 目录挂载到容器中的 /container_path/ 目录中。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果是具体到单个文件的话，就是只挂载一个文件。</span></span></code></pre></div><h3 id="设置环境变量-e-env-env-file" tabindex="-1"><a class="header-anchor" href="#设置环境变量-e-env-env-file"><span><strong>设置环境变量（<code>-e</code>，<code>--env</code>，<code>--env-file</code>）</strong></span></a></h3><p>为容器设置环境变量，或者覆盖容器中已有的环境变量。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VAR1=value1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --env</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> VAR2=value2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将 value1 赋值给环境变量 VAR1，将 value2 赋值给环境变量 VAR2</span></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>使用这个参数的时候，必须使用 <code>=</code>，如果不使用 <code>=</code> 的话，容器内就不会设置这个环境变量。</p></div><p>也可以将环境变量编写成一个文件，在环境变量文件中使用 <code>&lt;variable&gt;=value</code> 来设置环境变量，然后用 <code>--env-list</code> 来将这些环境变量设置到容器中。</p><p>在环境变量文件中，<code>#</code> 开头代表注释，但如果 <code>#</code> 出现在其他位置，则会被视为变量的一部分。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> env.list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 这是一个注释</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">VAR1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">value1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">VAR2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">value2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">USER</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如果只写了环境变量，但是没有提供值的话（如USER），会从宿主机环境中获取该环境变量的值，然后赋到容器中。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --env-file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> env.list</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ubuntu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -E</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;VAR|USER&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">VAR1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">value1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">VAR2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">value2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">USER</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">jonzeolla</span></span></code></pre></div><h3 id="设置重启策略-restart" tabindex="-1"><a class="header-anchor" href="#设置重启策略-restart"><span><strong>设置重启策略（<code>--restart</code>）</strong></span></a></h3><p>指定容器在退出后的重启策略。该策略能够确保容器的持续运行，并在发生故障时快速恢复。</p><ul><li><p><strong><code>--restart=no</code></strong>：默认策略。容器退出后不会自动重启。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --restart=no</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div></li><li><p><strong><code>--restart=on-failure:&lt;exit_number&gt;</code></strong>：当退出状态为非 0 时重启。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --restart=on-failure</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 退出状态为非 0 时重启</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --restart=on-failure:5</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 退出状态为 5 时重启</span></span></code></pre></div></li><li><p><strong><code>--restart=unless-stopped</code></strong>：只有手动退出容器和 docker 服务停止或重启时不重启，其他情况均会自动重启。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --restart=unless-stopped</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div></li><li><p><strong><code>--restart=always</code></strong>：始终自动重启。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --restart=always</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div></li></ul><h3 id="连接到另一个容器-link" tabindex="-1"><a class="header-anchor" href="#连接到另一个容器-link"><span><strong>连接到另一个容器（<code>--link</code>）</strong></span></a></h3><p>将容器连接到另一个容器，在两个容器之间建立网络连接。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --link</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> another_container_name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><h3 id="设置-dns-服务器-dns" tabindex="-1"><a class="header-anchor" href="#设置-dns-服务器-dns"><span><strong>设置 DNS 服务器（<code>--dns</code>）</strong></span></a></h3><p>指定容器使用的自定义 DNS 服务器。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dns</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8.8.8.8</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><h3 id="设置-dns-搜索域-dns-search" tabindex="-1"><a class="header-anchor" href="#设置-dns-搜索域-dns-search"><span><strong>设置 DNS 搜索域（<code>--dns-search</code>）</strong></span></a></h3><p>指定容器的 DNS 搜索域。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dns-search</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><h3 id="增加或删除容器的-linux-能力-cap-add-和-cap-drop" tabindex="-1"><a class="header-anchor" href="#增加或删除容器的-linux-能力-cap-add-和-cap-drop"><span><strong>增加或删除容器的 Linux 能力（<code>--cap-add</code></strong> 和 <strong><code>--cap-drop</code>）</strong></span></a></h3><p>增加或删除容器的 Linux 能力，用于控制容器的权限。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cap-add=SYS_ADMIN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><h3 id="挂载设备-device" tabindex="-1"><a class="header-anchor" href="#挂载设备-device"><span><strong>挂载设备（<code>--device</code>）</strong></span></a></h3><p>指定要访问的设备（如 <code>/dev/mem</code>，GPU 等）。需要说明的是，使用 <code>--device</code> 挂载的设备，容器内的进程通常没有权限操作，需要使用 <code>--cap-add</code> 开放相应的权限。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --device</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/mem:/dev/mem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cap-add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SYS_RAWIO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 宿主机中的 /dev/mem 设备挂载到容器的 /dev/mem 中</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 为容器添加 SYS_RAWIO 能力</span></span></code></pre></div><h3 id="特权模式-privileged" tabindex="-1"><a class="header-anchor" href="#特权模式-privileged"><span><strong>特权模式（<code>--privileged</code>）</strong></span></a></h3><p>给容器赋予特权，可以访问主机的设备，例如加载内核模块、直接操作硬件设备等。</p><p>具体来说，这个选项做了以下两件事情：</p><ul><li>给容器添加了所有的 capabilities （<code>--cap-add</code>）</li><li>允许容器访问主机的所有设备 （<code>--device</code>）</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --privileged=true</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> centos:7.9.2009</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/sbin/init</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 以特权模式启动 centos，这样就可以在容器中使用 systemctl 了。</span></span></code></pre></div><h3 id="挂载临时文件系统-tmpfs" tabindex="-1"><a class="header-anchor" href="#挂载临时文件系统-tmpfs"><span><strong>挂载临时文件系统（<code>--tmpfs</code>）</strong></span></a></h3><p>在容器内创建临时文件系统，用于存储临时数据。容器中的文件将存放在主机的内存中。当容器停止时，<code>--tmpfs</code> 挂载将被删除，在那里写入的文件不会被持久化。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tmpfs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><div class="hint-container note"><p class="hint-container-title">举例</p><p>迅雷的一个 pcdn 分布式视频缓存系统，这个系统就有docker运行的镜像，而这个容器的启动命令为：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name=wxedge</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --restart=always</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --privileged</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --net=host</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tmpfs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tmpfs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/devil/Downloads/storage/:/storage:rw</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LISTEN_ADDR=&quot;0.0.0.0:18888&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    images-cluster.xycloud.com/wxedge/wxedge:latest</span></span></code></pre></div><p>可以看到，这个 pcdn 的应用的相关运行文件就是在 <code>/run</code> 文件夹下，同时这个文件夹是采用 <code>--tmpfs</code> 方式挂载的，因此这样就保证了这个应用的运行文件是被存储在主机内存中的。</p></div><h3 id="容器资源限制-ulimit" tabindex="-1"><a class="header-anchor" href="#容器资源限制-ulimit"><span><strong>容器资源限制（<code>--ulimit</code>）</strong></span></a></h3><p>类似于 Linux 中的 <code>ulimit</code> 功能，此功能用于设置容器的资源限制，如最大打开文件数、最大进程数等。</p><p>具体可用的资源类型通常包括：</p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">示例</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>core</code></td><td style="text-align:center;"><code>core=0</code></td><td style="text-align:left;">最大核心转储文件大小，单位是 blocks（1 block = 1 KB）。当进程被中止时（如：程序崩溃），内核会检查这个值，然后进程的当前目录下创建一个 core 文件。（<code>RLIMIT_CORE</code>）<br> <ul><li> 0 代表不产生 core 文件；</li> <li> -1 代表不限制 core 文件大小。</li></ul></td></tr><tr><td style="text-align:center;"><code>cpu</code></td><td style="text-align:center;"><code>cpu=-1</code></td><td style="text-align:left;">进程占用 CPU 的最大时间，单位是秒。如果超过这个时间，内核会发送一个 <code>SIGXCPU</code> 信号，如果进程还是没有终止，再发送 <code>SIGKILL</code> 信号。（<code>RLIMIT_CPU</code>）<br> <ul><li> -1 代表不限制 CPU 时间。</li></ul></td></tr><tr><td style="text-align:center;"><code>data</code></td><td style="text-align:center;"><code>data=-1</code></td><td style="text-align:left;">设置数据段的最大字节长度（最大堆大小），单位是 KB。内核在扩大进程的堆空间之前，检查这个值。（<code>RLIMIT_DATA</code>）<br> <ul><li> -1 代表不限制数据段大小。</li></ul></td></tr><tr><td style="text-align:center;"><code>fsize</code></td><td style="text-align:center;"><code>fsize=-1</code></td><td style="text-align:left;">设置最大文件大小，单位是 blocks (1 block = 1 KB)。如果进程尝试扩大文件超过这个值，内核发送一个 <code>SIGXFSZ</code> 信号。（<code>RLIMIT_FSIZE</code>）<br> <ul><li> -1 代表不限制文件大小。</li></ul></td></tr><tr><td style="text-align:center;"><code>locks</code></td><td style="text-align:center;"><code>locks=-1</code></td><td style="text-align:left;">设置文件锁的最大数量。（<code>RLIMIT_LOCKS</code>）<br> <ul><li> -1 代表不限制文件锁数量。</li></ul></td></tr><tr><td style="text-align:center;"><code>memlock</code></td><td style="text-align:center;"><code>memlock=64</code></td><td style="text-align:left;">设置非交换内存的最大值，单位是 KB。当内核调用 <code>mlock()</code> 或 <code>mlockall()</code> 系统调用尝试给一个页帧加锁时会检查该值。（<code>RLIMIT_MEMLOCK</code>）</td></tr><tr><td style="text-align:center;"><code>msgqueue</code></td><td style="text-align:center;"><code>msgqueue=819200</code></td><td style="text-align:left;">POSIX 消息队列的最大字节数。（<code>RLIMIT_MSGQUEUE</code>）</td></tr><tr><td style="text-align:center;"><code>nice</code></td><td style="text-align:center;">没用过</td><td style="text-align:left;">优先级的完美值。进程可通过 <code>setpriority()</code> 或 <code>nice()</code> 设置。（<code>RLIMIT_NICE</code>）</td></tr><tr><td style="text-align:center;"><code>nofile</code></td><td style="text-align:center;"><code>nofile=1024</code></td><td style="text-align:left;">打开的文件描述符最大数量。当新打开一个文件或复制文件描述符时，内核都会检查这个值。（<code>RLIMIT_NOFILE</code>）</td></tr><tr><td style="text-align:center;"><code>nproc</code></td><td style="text-align:center;"><code>nproc=31191</code></td><td style="text-align:left;">用户可以拥有的最大进程数量。（<code>RLIMIT_NPROC</code>）</td></tr><tr><td style="text-align:center;"><code>rss</code></td><td style="text-align:center;"><code>rss=-1</code></td><td style="text-align:left;">进程可以使用的常驻内存的最大值。（<code>RLIMIT_RSS</code>）</td></tr><tr><td style="text-align:center;"><code>rtprio</code></td><td style="text-align:center;"><code>rtprio=0</code></td><td style="text-align:left;">最大实时优先级。进程可通过 <code>sched_setscheduler</code> 和 <code>sched_setparam</code> 设置。（<code>RLIMIT_RTPRIO</code>）</td></tr><tr><td style="text-align:center;"><code>rttime</code></td><td style="text-align:center;">没用过</td><td style="text-align:left;">实时任务的超时时间，单位是微秒。（<code>RLIMIT_RTTIME</code>）</td></tr><tr><td style="text-align:center;"><code>sigpending</code></td><td style="text-align:center;"><code>sigpending=31191</code></td><td style="text-align:left;">进程挂起信号的最大数量。（<code>RLIMIT_SIGPENDING</code>）</td></tr><tr><td style="text-align:center;"><code>stack</code></td><td style="text-align:center;"><code>stack=8192</code></td><td style="text-align:left;">最大栈空间，单位是字节(Bytes)。在扩展进程的用户态栈时，内核会检查这个值。（<code>RLIMIT_STACK</code>）</td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --ulimit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nofile=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image_name:tag</span></span></code></pre></div><h3 id="cpus-cpu数量" tabindex="-1"><a class="header-anchor" href="#cpus-cpu数量"><span><strong><code>--cpus=&lt;CPU数量&gt;</code></strong></span></a></h3><p>设置容器可以使用的 CPU 个数（可以是小数）。</p><p>举例：<code>docker run --cpus=1.5 image_name:tag</code></p><h3 id="cpu-shares-权重值" tabindex="-1"><a class="header-anchor" href="#cpu-shares-权重值"><span><strong><code>--cpu-shares &lt;权重值&gt;</code></strong></span></a></h3><p>设置容器的 CPU 份额，用于控制 CPU 资源的分配。用于设置容器使用 CPU 的时间片权重，决定容器在资源竞争时的优先级。默认值为 1024，值越高，容器获得 CPU 时间片的比例越大。</p><p>举例：<code>docker run --cpu-shares 512 image_name:tag</code></p><h3 id="–cpu-quota-cpu时间" tabindex="-1"><a class="header-anchor" href="#–cpu-quota-cpu时间"><span><strong><code>–cpu-quota=&lt;CPU时间&gt;</code></strong></span></a></h3><p>设置容器的 CPU 配额，以微秒为单位。设置容器在一个调度周期内能使用的 CPU 时间上限。</p><p>举例：<code>docker run --cpu-quota=50000 image_name:tag</code></p><h3 id="cpu-period-调度周期" tabindex="-1"><a class="header-anchor" href="#cpu-period-调度周期"><span><strong><code>--cpu-period=&lt;调度周期&gt;</code></strong></span></a></h3><p>设置容器的 CPU 调度周期，以微秒为单位。</p><p>举例：<code>docker run --cpu-period=100000 image_name:tag</code></p><h3 id="cpu-period-调度周期-1" tabindex="-1"><a class="header-anchor" href="#cpu-period-调度周期-1"><span><strong><code>--cpu-period=&lt;调度周期&gt;</code></strong></span></a></h3><p>设置容器的 CPU 调度周期，以微秒为单位。</p><p>举例：<code>docker run --cpu-period=100000 image_name:tag</code></p><h3 id="cpuset-cpus-cpu-id" tabindex="-1"><a class="header-anchor" href="#cpuset-cpus-cpu-id"><span><strong><code>--cpuset-cpus=&quot;&lt;CPU ID&gt;&quot;</code></strong></span></a></h3><p>限制容器运行在指定的 CPU 核心； 例如宿主机有 4 个 CPU 核心，CPU 核心标识为 0 - 3，我启动一台容器，只想让这台容器运行在标识 0 和 3 的两个 CPU 核心上，可以使用 <code>--cpuset-cpus=&quot;0,3&quot;</code> 来指定。</p><p>举例：<code>docker run --cpuset-cpus=&quot;0,3&quot; image_name:tag</code></p><h3 id="memory-内存大小" tabindex="-1"><a class="header-anchor" href="#memory-内存大小"><span><strong><code>--memory &lt;内存大小&gt;</code></strong></span></a></h3><p>设置容器可使用的内存限制。单位为G、M、K</p><p>举例：<code>docker run --memory 1G image_name:tag</code></p><h3 id="memory-swap-内存大小" tabindex="-1"><a class="header-anchor" href="#memory-swap-内存大小"><span><strong><code>--memory-swap=&lt;内存大小&gt;</code></strong></span></a></h3><p>设置容器可使用的 内存 + swap 的限制（总量）。如果在启动容器时，只指定 <code>--memory</code> 而不指定 <code>--memory-swap</code>， 那么 <code>--memory-swap</code> 默认为 <code>--memory</code> 的两倍。</p><p>举例：<code>docker run --memory-swap 1G image_name:tag</code></p><h3 id="net-网络模式" tabindex="-1"><a class="header-anchor" href="#net-网络模式"><span><strong><code>--net=&lt;网络模式&gt;</code></strong></span></a></h3><p>指定容器使用的网络模式。</p><ul><li><strong>bridge 模式</strong>：默认的网络模式。Docker安装启动后会在宿主主机上创建一个名为 docker0 的虚拟网桥，处于OSI七层模型的数据链路层，后续每当我们创建一个新的 docker 容器，在不指定容器网络模式的情况下，docker 会通过 docker0 与主机的网络连接，docker0 相当于网桥。使用 bridge 模式新创建的容器，容器内部都会有一个虚拟网卡，名为 eth0，容器之间可以通过容器内部的 IP 相互通信。</li><li><strong>host 模式</strong>：如果指定的 host 模式容器不会拥有一个独立 network namesace，而是与宿主主机共用 network namesace。也就说明容器本身不会有的网卡信息，而是使用宿主主机的网络信息。容器除了网络，其他比如文件系统、进程等依然都是隔离的。<strong>但因为和宿主主机共享 network namespace，会有可能出现端口冲突的情况。</strong></li><li><strong>container 模式</strong>：container 模式和 host 模式很类似，host 模式和宿主主机共享 network namespace；container 模式和指定的容器共享，两者之间除了网络共享（网卡、主机名、IP 地址），其他方面还是隔离的。</li><li><strong>none 模式</strong>：如果 docker 容器指定的网络模式为 none，该容器没有办法联网，外界也无法访问它，可以用来做测试。</li></ul><p>举例：<code>docker run --net=bridge image_name:tag</code></p><hr><p>--hostname：设置容器的主机名。<br> 举例：docker run --hostname my_container image_name:tag</p><p>--user：指定容器运行时的用户名或 UID。<br> 举例：docker run --user username image_name:tag</p><p>--volume-driver：指定容器使用的卷驱动程序。<br> 示例：docker run --volume-driver my_driver image_name:tag</p><p>--shm-size：设置容器的共享内存大小。<br> 举例：docker run --shm-size 2g image_name:tag</p><p>--add-host：向容器的 /etc/hosts 文件添加自定义主机名和 IP 映射。<br> 举例：docker run --add-host myhost:192.168.0.100 image_name:tag</p><p>--read-only：将容器的文件系统设置为只读模式。<br> 举例：docker run --read-only image_name:tag</p><p>--dns-option：为容器的 DNS 配置添加自定义选项。<br> 举例：docker run --dns-option=timeout:5 image_name:tag</p><p>--sysctl：设置容器的内核参数。<br> 举例：docker run --sysctl net.ipv4.ip_forward=1 image_name:tag</p><p>--label：为容器添加标签，用于识别和组织容器。<br> 举例：docker run --label env=production image_name:tag</p><p>--workdir：设置容器的工作目录。<br> 举例：docker run --workdir /app image_name:tag</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ol><li>《docker run 命令常用参数详解》<a href="https://www.cnblogs.com/mingyue5826/p/17883524.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/mingyue5826/p/17883524.html</a></li><li>《docker run 命令30个常用参数详解》<a href="https://blog.csdn.net/wangshuai6707/article/details/132299930" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/wangshuai6707/article/details/132299930</a></li></ol>`,103))])}const c=e(d,[["render",r]]),g=JSON.parse('{"path":"/posts/Config/Docker/Config/Docker%20CLI/2025-05-20-docker_run.html","title":"docker run 命令","lang":"zh-CN","frontmatter":{"title":"docker run 命令","shortTitle":"docker run","description":"记录一下我自己可能会比较常用的 Docker 命令","icon":"/assets/blogicons/Docker.png","author":null,"isOriginal":true,"date":"2025-05-20T00:00:00.000Z","categories":["Docker"],"tags":["常用命令"],"license":"MIT","sticky":false,"star":true,"article":true,"timeline":true,"comment":false,"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker run 命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-09T11:46:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"昌霖学长\\",\\"email\\":\\"shawnlyu1990@gmail.com\\"}]}"],["meta",{"property":"og:url","content":"https://shawnlyu1990.github.io/posts/Config/Docker/Config/Docker%20CLI/2025-05-20-docker_run.html"}],["meta",{"property":"og:site_name","content":"昌霖学长的自习室"}],["meta",{"property":"og:title","content":"docker run 命令"}],["meta",{"property":"og:description","content":"记录一下我自己可能会比较常用的 Docker 命令"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-09T11:46:07.000Z"}],["meta",{"property":"article:tag","content":"常用命令"}],["meta",{"property":"article:published_time","content":"2025-05-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-09T11:46:07.000Z"}]]},"git":{"createdTime":1749469567000,"updatedTime":1749469567000,"contributors":[{"name":"Shawn Lyu","username":"","email":"shawnlyu1990@gmail.com","commits":1}]},"readingTime":{"minutes":11.42,"words":3425},"filePathRelative":"posts/Config/Docker/Config/Docker CLI/2025-05-20-docker_run.md","excerpt":"","copyright":{"license":"MIT"}}');export{c as comp,g as data};
