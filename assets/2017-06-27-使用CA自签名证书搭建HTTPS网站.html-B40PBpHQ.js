import{w as i,z as s,C as e,K as a}from"./app-Ce6B3Mnt.js";const l={},t=a(`<div class="hint-container important"><p class="hint-container-title">重要</p><p>由于作者水平有限，以下内容仅在我的环境中配置成功，这里提供思路供您参考。</p><p>因为每个环境各有差异，如果有些配置在您的环境中出现了一些异常错误，请您自行排查解决。</p></div><p>在自己折腾 HTTPS 网站的时候用自定义的 CA 给自己的网站做自签名的问题一直困扰了我好久，下面是我自己测试成功的案例，网上有很多类似的问题，在这里留存一份供自己以后参考使用。</p><h2 id="_1-安装-linux-apache-openssl-组件" tabindex="-1"><a class="header-anchor" href="#_1-安装-linux-apache-openssl-组件"><span>1. 安装 linux，apache，openssl 组件</span></a></h2><p>在此不做赘述，我用的就是 CentOS 里自带的 Apache 和 openssl。</p><h2 id="_2-生成自签名的-ca-证书" tabindex="-1"><a class="header-anchor" href="#_2-生成自签名的-ca-证书"><span>2. 生成自签名的 CA 证书</span></a></h2><h3 id="_2-1-生成-ca-私钥" tabindex="-1"><a class="header-anchor" href="#_2-1-生成-ca-私钥"><span>2.1. 生成 CA 私钥</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# openssl genrsa -out ca.key 2048</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在当前目录下生成 ca.key 文件，这个文件是下一步生成 CA 证书的私钥。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-生成-ca-自签名证书" tabindex="-1"><a class="header-anchor" href="#_2-2-生成-ca-自签名证书"><span>2.2. 生成 CA 自签名证书</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#方法一：如果需要使用第三方 CA 签发证书</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# openssl req -new -key ca.key -out ca.req -config /etc/pki/tls/openssl.cnf</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# openssl req -x509 -key ca.key -in ca.req -out ca.crt -days 3650 -config /etc/pki/tls/openssl.cnf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">#方法二：如果就服务器本机就是 CA ，则可以将上述两个操作合并为一个操作（如下命令），它在自签署过程中将在内存中自动创建证书请求文件，当然，既然要创建证书请求文件，就需要人为输入申请者的信息了。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -config /etc/pki/tls/openssl.cnf </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在当前目录下生成 ca.crt 这个文件，这个就是 CA 证书了，其他服务器和客户端的证书都是用 ca.crt 这个文件签发的。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-生成服务器证书" tabindex="-1"><a class="header-anchor" href="#_3-生成服务器证书"><span>3. 生成服务器证书</span></a></h2><h3 id="_3-1-生成服务器端的私钥" tabindex="-1"><a class="header-anchor" href="#_3-1-生成服务器端的私钥"><span>3.1. 生成服务器端的私钥</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# openssl genrsa -out server.key 2048 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在当前目录下生成 server.key 文件，这个文件是服务器段的私钥。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-生成服务器端的签署申请" tabindex="-1"><a class="header-anchor" href="#_3-2-生成服务器端的签署申请"><span>3.2. 生成服务器端的签署申请</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# openssl req -new -out server.req -key server.key -config /etc/pki/tls/openssl.cnf </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 在当前目录下生成 server 证书的签署申请，后面用 CA 给服务器签署证书的时候需要用到这个申请文件。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 生成签署申请的过程中需要填写一些信息，按提示要求填写即可</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>但需要说明的是 <code>Common Name</code> 必须和 <code>/usr/local/apache2/conf/ssl.conf</code> 文件里面的 <code>&lt;VirtualHost *:443&gt;</code> 下面的 <code>ServerName</code> 一致，否则客户端访问的时候会提示证书信息不能认证。</p></div><h3 id="_3-3-使用-ca-证书给服务器端签署服务器证书" tabindex="-1"><a class="header-anchor" href="#_3-3-使用-ca-证书给服务器端签署服务器证书"><span>3.3. 使用 CA 证书给服务器端签署服务器证书</span></a></h3><p>进入 <code>/etc/pki/CA/</code> 目录下，在里面创建一个 <code>index.txt</code> 空文件，以及一个名为 <code>serial</code>，内容为 <code>01</code> 的文件。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# touch /etc/pki/CA/index.txt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# touch /etc/pki/CA/serial</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# echo </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;01&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;&gt; /etc/pki/CA/serial</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行签署证书命令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# openssl ca -in server.req -out server.crt -cert ca.crt -keyfile ca.key -config /etc/pki/tls/openssl.cnf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 这个 server.crt 就是由 CA 签发的服务器证书。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-配置ssl-conf" tabindex="-1"><a class="header-anchor" href="#_4-配置ssl-conf"><span>4. 配置ssl.conf</span></a></h2><p>将我们生成的 <code>server.crt</code>，<code>server.key</code>，<code>ca.crt</code> 三个文件复制到 <code>/usr/local/apache2/conf/ssl.crt/</code> 目录下。</p><p>编辑 <code>ssl.conf</code> 文件，修改 <code>SSLCertificateFile</code>、<code>SSLCertificateKeyFile</code>、<code>SSLCACertificatePath</code>、<code>SSLCACertificateFile</code> 几个配置项如下：</p><div class="language-apache line-numbers-mode" data-highlighter="shiki" data-ext="apache" data-title="/usr/local/apache2/conf/ssl.conf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SSLCertificateFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &quot;/usr/local/apache2/conf/ssl.crt/liveupdate_server.crt&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SSLCertificateKeyFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &quot;/usr/local/apache2/conf/ssl.crt/server.key&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SSLCACertificatePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &quot;/usr/local/apache2/conf/ssl.crt&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SSLCACertificateFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &quot;/usr/local/apache2/conf/ssl.crt/ca.crt&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 apache 服务</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 如果是用yum安装的apache服务</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# service httpd restart </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 如果是用源码安装的apache服务</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[root@localhost ~]# /usr/local/apache2/bin/apachectl -k restart</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-在-pc-端导入-ca-证书到受信任的根证书颁发机构-即可实现-https-访问" tabindex="-1"><a class="header-anchor" href="#_5-在-pc-端导入-ca-证书到受信任的根证书颁发机构-即可实现-https-访问"><span>5. 在 PC 端导入 CA 证书到受信任的根证书颁发机构，即可实现 HTTPS 访问</span></a></h2>`,27),n=[t];function c(h,r){return s(),e("div",null,n)}const o=i(l,[["render",c],["__file","2017-06-27-使用CA自签名证书搭建HTTPS网站.html.vue"]]),p=JSON.parse('{"path":"/posts/Linux/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/2017-06-27-%E4%BD%BF%E7%94%A8CA%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E6%90%AD%E5%BB%BAHTTPS%E7%BD%91%E7%AB%99.html","title":"使用 CA 自签名证书搭建 HTTPS 网站","lang":"zh-CN","frontmatter":{"title":"使用 CA 自签名证书搭建 HTTPS 网站","shortTitle":"使用 CA 自签名证书搭建 HTTPS 网站","description":"使用自建的 CA 根证书服务器给自己的 HTTPS 网站签发证书，CA 根证书服务器和 HTTPS 服务器可以是一台，也可以是两台不同的机器。","icon":"CA-Cert","author":"昌霖学长","isOriginal":true,"date":"2017-06-27T00:00:00.000Z","categories":["Linux","服务部署"],"tags":["CA","HTTPS","Apache"],"license":"MIT","sticky":false,"star":false,"article":true,"timeline":true,"comment":false,"head":[["meta",{"property":"og:url","content":"https://shawnlyu1990.github.io/posts/Linux/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/2017-06-27-%E4%BD%BF%E7%94%A8CA%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E6%90%AD%E5%BB%BAHTTPS%E7%BD%91%E7%AB%99.html"}],["meta",{"property":"og:site_name","content":"知识杂货铺"}],["meta",{"property":"og:title","content":"使用 CA 自签名证书搭建 HTTPS 网站"}],["meta",{"property":"og:description","content":"使用自建的 CA 根证书服务器给自己的 HTTPS 网站签发证书，CA 根证书服务器和 HTTPS 服务器可以是一台，也可以是两台不同的机器。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-06T08:09:36.000Z"}],["meta",{"property":"article:author","content":"昌霖学长"}],["meta",{"property":"article:tag","content":"CA"}],["meta",{"property":"article:tag","content":"HTTPS"}],["meta",{"property":"article:tag","content":"Apache"}],["meta",{"property":"article:published_time","content":"2017-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-06T08:09:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 CA 自签名证书搭建 HTTPS 网站\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-06T08:09:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"昌霖学长\\"}]}"]]},"headers":[{"level":2,"title":"1. 安装 linux，apache，openssl 组件","slug":"_1-安装-linux-apache-openssl-组件","link":"#_1-安装-linux-apache-openssl-组件","children":[]},{"level":2,"title":"2. 生成自签名的 CA 证书","slug":"_2-生成自签名的-ca-证书","link":"#_2-生成自签名的-ca-证书","children":[{"level":3,"title":"2.1. 生成 CA 私钥","slug":"_2-1-生成-ca-私钥","link":"#_2-1-生成-ca-私钥","children":[]},{"level":3,"title":"2.2. 生成 CA 自签名证书","slug":"_2-2-生成-ca-自签名证书","link":"#_2-2-生成-ca-自签名证书","children":[]}]},{"level":2,"title":"3. 生成服务器证书","slug":"_3-生成服务器证书","link":"#_3-生成服务器证书","children":[{"level":3,"title":"3.1. 生成服务器端的私钥","slug":"_3-1-生成服务器端的私钥","link":"#_3-1-生成服务器端的私钥","children":[]},{"level":3,"title":"3.2. 生成服务器端的签署申请","slug":"_3-2-生成服务器端的签署申请","link":"#_3-2-生成服务器端的签署申请","children":[]},{"level":3,"title":"3.3. 使用 CA 证书给服务器端签署服务器证书","slug":"_3-3-使用-ca-证书给服务器端签署服务器证书","link":"#_3-3-使用-ca-证书给服务器端签署服务器证书","children":[]}]},{"level":2,"title":"4. 配置ssl.conf","slug":"_4-配置ssl-conf","link":"#_4-配置ssl-conf","children":[]},{"level":2,"title":"5. 在 PC 端导入 CA 证书到受信任的根证书颁发机构，即可实现 HTTPS 访问","slug":"_5-在-pc-端导入-ca-证书到受信任的根证书颁发机构-即可实现-https-访问","link":"#_5-在-pc-端导入-ca-证书到受信任的根证书颁发机构-即可实现-https-访问","children":[]}],"git":{"createdTime":1723779818000,"updatedTime":1725610176000,"contributors":[{"name":"Shawn Lyu","email":"shawnlyu1990@gmail.com","commits":4}]},"readingTime":{"minutes":3.84,"words":1152},"filePathRelative":"posts/Linux/服务部署/2017-06-27-使用CA自签名证书搭建HTTPS网站.md","localizedDate":"2017年6月27日","excerpt":"","copyright":{"license":"MIT"}}');export{o as comp,p as data};
